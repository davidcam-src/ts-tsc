name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID: 
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: true
env:
  ECR_REGISTRY: 356223155086.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ts-tsc
  AWS_REGION: us-east-1
  ECR_IMAGE_TAG: node-ec2
  EC2_PUB_IP: ec2-54-198-98-185.compute-1.amazonaws.com
  SSH_KEY: ${{ secrets.SSH_KEY }}
  AWS_INSTANCE_SG_ID: sg-085f4702e51ae6f0d

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Use Node.js
        uses: actions/setup-node@v2 
        with:
          node-version: '14.x'
          
      - name: Install dependencies
        run: |
              npm i -g npm
              npm install 
        
#       - name: Run tests
#         run: npm run test 
            
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
        
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.AWS_REGION }}

#       - name: Build and push Docker image
#         id: build-image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           push: true
#           tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_IMAGE_TAG }}

      - name: Get Actions Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2
        
      - name: Whitelist Actions Runner IP Address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: New Container on EC2 instance
        run: |
          echo "${{ env.SSH_KEY }}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@54.92.188.135 '
              # Now we have got the access of EC2 and we will start the deploy .
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
              docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_IMAGE_TAG }}
              docker stop $(docker ps -aq) || true
              docker rm $(docker ps -aq) || true
              docker run -d --name "app_container" --memory=4g -p 4000:4000 -e AWS_ACCESS_KEY_ID="${{ github.event.inputs.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}" -e AWS_SESSION_TOKEN="${{ github.event.inputs.AWS_SESSION_TOKEN }}" ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_IMAGE_TAG }} 
              docker ps
              '
              
#       - name: Revoke Actions Runner IP Address
#         run: |
#           aws ec2 revoke-security-group-ingress \
#             --group-id $AWS_INSTANCE_SG_ID \
#             --protocol tcp \
#             --port 22 \
#             --cidr ${{ steps.ip.outputs.ipv4 }}/32
